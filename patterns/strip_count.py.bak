#!/usr/bin/env python

"""A demo client for Open Pixel Control
http://github.com/zestyping/openpixelcontrol

Creates a shifting rainbow plaid pattern by overlaying different sine waves
in the red, green, and blue channels.

To run:
First start the gl simulator using the included "wall" layout

    make
    bin/gl_server layouts/wall.json

Then run this script in another shell to send colors to the simulator

    python_clients/raver_plaid.py

"""

from __future__ import division
import time
import math
import sys

import opc
import color_utils


#-------------------------------------------------------------------------------
# handle command line

if len(sys.argv) == 1:
    IP_PORT = '127.0.0.1:7890'
elif len(sys.argv) == 2 and ':' in sys.argv[1] and not sys.argv[1].startswith('-'):
    IP_PORT = sys.argv[1]
else:
    print
    print '    Usage: raver_plaid.py [ip:port]'
    print
    print '    If not set, ip:port defauls to 127.0.0.1:7889'
    print
    sys.exit(0)


#-------------------------------------------------------------------------------
# connect to server

client = opc.Client(IP_PORT)
if client.can_connect():
    print '    connected to %s' % IP_PORT
else:
    # can't connect, but keep running in case the server appears later
    print '    WARNING: could not connect to %s' % IP_PORT
print


#-------------------------------------------------------------------------------
# send pixels

print '    sending pixels forever (control-c to exit)...'
print

waves = 300

n_pixels = 6400  # number of pixels in the included "wall" layout
fps = 100         # frames per second

strips = 0
strip_count = 0

start_time = time.time()

t = time.time() - start_time
pixels = []
while True:
    t = time.time() - start_time
    pixels = []
    for ii in range(n_pixels):
        pct = ii / n_pixels
        if strip_count == 64:
            strips = strips + 1
            strip_count = 0
        strip_count = strip_count + 1
        
        ones = strips % 10
        tens = strips / 10

        one_min = 1
        one_max = ones * 2
        
        ten_min = 20
        ten_max = 20 + tens * 2

        r = 0
        b = 0 
        g = 0

        if strip_count % 2 == 0:
            if one_min <= strip_count <= one_max:
                b = 255

            if ten_min <= strip_count <= ten_max:
                g = 255

        pixels.append((r, g, b))

    client.put_pixels(pixels, channel=0)
    time.sleep(0.1)

